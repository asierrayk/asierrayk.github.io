<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>El placer de pensar</title><link href="https://asierrayk.github.io/" rel="alternate"></link><link href="https://asierrayk.github.io/feeds/all.atom.xml" rel="self"></link><id>https://asierrayk.github.io/</id><updated>2021-05-30T20:22:00+02:00</updated><subtitle>&lt;a href="/bob-ross/" target="_blank"&gt;El placer de pensar&lt;/a&gt;</subtitle><entry><title>Calendario Mental</title><link href="https://asierrayk.github.io/day-of-week-tutorial" rel="alternate"></link><published>2021-05-30T20:22:00+02:00</published><updated>2021-05-30T20:22:00+02:00</updated><author><name></name></author><id>tag:asierrayk.github.io,2021-05-30:/day-of-week-tutorial</id><summary type="html">
&lt;p&gt;Existe un método para poder calcular en que día de la semana cayó cualquier fecha.
El método es muy sencillo y hay que seguir los siguientes pasos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Calcular las claves para cada parte de la fecha:&lt;ul&gt;
&lt;li&gt;Calcular la clave del &lt;strong&gt;día del mes&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Calcular la clave del &lt;strong&gt;mes&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Calcular la …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">
&lt;p&gt;Existe un método para poder calcular en que día de la semana cayó cualquier fecha.
El método es muy sencillo y hay que seguir los siguientes pasos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Calcular las claves para cada parte de la fecha:&lt;ul&gt;
&lt;li&gt;Calcular la clave del &lt;strong&gt;día del mes&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Calcular la clave del &lt;strong&gt;mes&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Calcular la clave para el &lt;strong&gt;&lt;em&gt;siglo&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Calcular la clave para el &lt;strong&gt;año&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sumar todas las claves.&lt;/li&gt;
&lt;li&gt;Restar 1 si el año es bisiesto y el mes es enero o febrero.&lt;/li&gt;
&lt;li&gt;Aplicar modulo 7 para obtener el día de la semana.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="1-calculo-de-claves"&gt;1. Cálculo de claves&lt;/h1&gt;
&lt;p&gt;Vamos a ver como poder calcular cada una de las claves, para cada una de las partes de la fecha.
Cada una de las claves que obtengamos la podemos simplificar aplicando modulo 7 antes de llegar al paso 2.&lt;/p&gt;
&lt;h2 id="clave-del-dia-del-mes"&gt;Clave del día del mes&lt;/h2&gt;
&lt;p&gt;Para calcular la clave del día del mes, simplemente debemos coger el número del mes como clave.
Por ejemplo para la fecha &lt;strong&gt;16 julio 1969&lt;/strong&gt; la clave para el día del mes es el propio número del día del mes &lt;strong&gt;16&lt;/strong&gt; que simplificada es &lt;strong&gt;2&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="clave-del-mes"&gt;Clave del mes&lt;/h2&gt;
&lt;p&gt;Para calcular la clave del mes debemos aplicar la correspondencia de la siguiente tabla:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Mes&lt;/th&gt;
&lt;th align="center"&gt;Clave&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Enero&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Febrero&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Marzo&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Abril&lt;/td&gt;
&lt;td align="center"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Mayo&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Junio&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Julio&lt;/td&gt;
&lt;td align="center"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Agosto&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Septiembre&lt;/td&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Octubre&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Noviembre&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Diciembre&lt;/td&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Por ejemplo para la fecha 16 de julio de 1969 la clave del mes es &lt;strong&gt;6&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="clave-del-siglo"&gt;Clave del &lt;em&gt;siglo&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Para esta parte de la fecha, nos fijamos en el año ignorando las dos últimas cifras.
Para calcular la clave del siglo deberemos tener en cuenta la siguiente correspondencia:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;&lt;em&gt;Siglo&lt;/em&gt;&lt;/th&gt;
&lt;th align="center"&gt;Clave&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;16xx&lt;/td&gt;
&lt;td align="center"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;17xx&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;18xx&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;19xx&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;20xx&lt;/td&gt;
&lt;td align="center"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;21xx&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="clave-del-ano"&gt;Clave del año&lt;/h2&gt;
&lt;p&gt;El cálculo de la clave del año se compone de los siguientes pasos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Nos quedamos con las &lt;strong&gt;dos últimas cifras del año&lt;/strong&gt;. Por ejemplo con 1969 nos quedamos con 69.&lt;/li&gt;
&lt;li&gt;Calculamos el &lt;strong&gt;cociente&lt;/strong&gt; de la división del primer paso &lt;strong&gt;entre 4&lt;/strong&gt;. Por ejemplo 69 entre 4 da como cociente 17. Podemos simplificar el número 17 y usar 3 en su lugar.
Este paso está relacionado con los años bisiestos.&lt;/li&gt;
&lt;li&gt;Calculamos el &lt;strong&gt;resto&lt;/strong&gt; de la división del número del primer paso &lt;strong&gt;entre 7&lt;/strong&gt;. Por ejemplo 69 modulo 7 es 6.&lt;/li&gt;
&lt;li&gt;Por último &lt;strong&gt;sumamos los números del segundo y tercer paso&lt;/strong&gt; y obtenemos la clave para el año.
   Con nuestro ejemplo sumamos 3 y 6 y obtenemos 9 que simplificado nos da 2.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="2-comprobar-el-resultado"&gt;2. Comprobar el resultado&lt;/h1&gt;
&lt;p&gt;Una vez tengamos todas las claves basta con sumarlas, simplificar el resultado para que nos quede un número entre 0 y 6.
Comprobar el resultado con la siguiente tabla:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Día de la semana&lt;/th&gt;
&lt;th align="center"&gt;Clave&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Domingo&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Lunes&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Martes&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Miércoles&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Jueves&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Viernes&lt;/td&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Sábado&lt;/td&gt;
&lt;td align="center"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Para la fecha &lt;strong&gt;16 de julio de 1969&lt;/strong&gt; tendríamos:
2 + 6 + 0 + 3 + 6 = 17 = 3 
Por tanto ese día fue un &lt;strong&gt;miércoles&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id="3-consideracion-de-anos-bisiestos"&gt;3. Consideración de años bisiestos&lt;/h1&gt;
&lt;p&gt;Si la fecha para la cual estamos calculando el día de la semana. Se trata de un año bisiesto y el mes es enero o febrero, al resultado final deberemos restar una unidad.&lt;/p&gt;
&lt;h2 id="definicion-ano-bisiesto"&gt;Definición año bisiesto&lt;/h2&gt;
&lt;p&gt;En el calendario que usamos actualmente que es el calendario Gregoriano, vigente desde 1582. Para nuestro calendario la definición de un año bisiesto es la siguiente: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Un año es bisiesto si es divisible por 4, excepto si acaba en 00,
que ha de ser divisible entre 400.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Es decir 1600 y 2000 son años bisiestos, sin embargo 1700, 1800 y 1900 no son años bisiestos.&lt;/p&gt;
&lt;h2 id="ejemplo-ano-bisiesto"&gt;Ejemplo año bisiesto&lt;/h2&gt;
&lt;p&gt;Calculemos el día de la semana para la fecha &lt;strong&gt;1 de enero de 2020&lt;/strong&gt;.
1 + 0 + 6 + 5 + 6 = 18 = 4
Pero debemos restar uno, ya que el año es bisiesto y el mes enero, por tanto el resultado es 3.
Es decir, un &lt;strong&gt;miércoles&lt;/strong&gt;.&lt;/p&gt;</content><category term="Matemáticas"></category><category term="Matemáticas"></category><category term="tutorial"></category></entry><entry><title>Mi primer plugin en VIM</title><link href="https://asierrayk.github.io/my-first-vim-plugin" rel="alternate"></link><published>2020-03-15T19:21:00+01:00</published><updated>2020-03-15T19:21:00+01:00</updated><author><name></name></author><id>tag:asierrayk.github.io,2020-03-15:/my-first-vim-plugin</id><summary type="html">&lt;p&gt;Tras usar Vim durante un largo periodo de tiempo, he decidido aventurarme a hacer mi primer plugin.&lt;/p&gt;
&lt;p&gt;Se trata de un plugin muy sencillo que simplemente te permite iterar una lista de posibles diccionarios para la corrección ortográfica.&lt;/p&gt;
&lt;p&gt;La idea es que sea posible activar el corrector ortográfico (&lt;code&gt;:set spell …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tras usar Vim durante un largo periodo de tiempo, he decidido aventurarme a hacer mi primer plugin.&lt;/p&gt;
&lt;p&gt;Se trata de un plugin muy sencillo que simplemente te permite iterar una lista de posibles diccionarios para la corrección ortográfica.&lt;/p&gt;
&lt;p&gt;La idea es que sea posible activar el corrector ortográfico (&lt;code&gt;:set spell&lt;/code&gt;) en caso de que este desactivado e ir iterando por una lista configurable de idiomas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:SpellLangList &lt;span class="p"&gt;=&lt;/span&gt; get&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;g&lt;/span&gt;:&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SpellLangList&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; []&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Cycle through spelllang list and toggle spell&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; ToggleCycleSpellLang&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt; &amp;amp;&lt;span class="k"&gt;spell&lt;/span&gt;
        &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="k"&gt;spell&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;:lang_index &lt;span class="p"&gt;=&lt;/span&gt; index&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;g&lt;/span&gt;:SpellLangList&lt;span class="p"&gt;,&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;spelllang&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;:lang_index &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt;:lang_index &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; % len&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;g&lt;/span&gt;:SpellLangList&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;spelllang&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:SpellLangList[&lt;span class="k"&gt;l&lt;/span&gt;:lang_index]

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;:lang_index &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;nospell&lt;/span&gt;
        &lt;span class="k"&gt;endif&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Se podría configurar por ejemplo con las siguientes opciones:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:SpellLangList&lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="s2"&gt;&amp;quot;en_us&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;es&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;en_us,es&amp;quot;&lt;/span&gt;]
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;F6&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; ToggleCycleSpellLang&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;De esta manera una primera pulsación de la tecla &lt;code&gt;F6&lt;/code&gt; activaría la corrección ortográfica para el buffer activo, y sucesivas pulsaciones irían cambiando el idioma activo (&lt;code&gt;:set spelllang=es&lt;/code&gt;) iterando la lista &lt;code&gt;g:SpellLangList&lt;/code&gt; hasta desactivar de nuevo la corrección ortográfica (&lt;code&gt;:set nospell&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;He subido el plugin a un repositorio en &lt;a class="ampl" href="https://github.com/asierrayk/vim-toggle" target="_blank"&gt;github&lt;/a&gt; y añadido alguna funcionalidad, relacionada con las ventanas &lt;code&gt;quickfix&lt;/code&gt; y &lt;code&gt;location&lt;/code&gt;.&lt;/p&gt;</content><category term="Programación"></category><category term="programación"></category><category term="Vim"></category></entry><entry><title>My first Vim plugin</title><link href="https://asierrayk.github.io/en/my-first-vim-plugin" rel="alternate"></link><published>2020-03-15T19:21:00+01:00</published><updated>2020-03-15T19:21:00+01:00</updated><author><name></name></author><id>tag:asierrayk.github.io,2020-03-15:/en/my-first-vim-plugin</id><summary type="html">&lt;p&gt;After been using Vim for a long time. I've decided to venture into the creation of my first vim plugin.&lt;/p&gt;
&lt;p&gt;It's a very simple plugin that allows you to iterate over a list of possible dictionaries used for spell checking.
The idea is to be able to activate the spell …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After been using Vim for a long time. I've decided to venture into the creation of my first vim plugin.&lt;/p&gt;
&lt;p&gt;It's a very simple plugin that allows you to iterate over a list of possible dictionaries used for spell checking.
The idea is to be able to activate the spell checking (&lt;code&gt;:set spell&lt;/code&gt;) in case it is deactivated and iterate over a configurable list of languages.&lt;/p&gt;
&lt;p&gt;The following function accomplish the objective.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:SpellLangList &lt;span class="p"&gt;=&lt;/span&gt; get&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;g&lt;/span&gt;:&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SpellLangList&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; []&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Cycle through spelllang list and toggle spell&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; ToggleCycleSpellLang&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt; &amp;amp;&lt;span class="k"&gt;spell&lt;/span&gt;
        &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="k"&gt;spell&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;:lang_index &lt;span class="p"&gt;=&lt;/span&gt; index&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;g&lt;/span&gt;:SpellLangList&lt;span class="p"&gt;,&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;spelllang&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;:lang_index &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt;:lang_index &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; % len&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;g&lt;/span&gt;:SpellLangList&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;spelllang&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:SpellLangList[&lt;span class="k"&gt;l&lt;/span&gt;:lang_index]

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;:lang_index &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;nospell&lt;/span&gt;
        &lt;span class="k"&gt;endif&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It'll be possible to configure the list of languages and the keybindings as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:SpellLangList&lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="s2"&gt;&amp;quot;en_us&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;es&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;en_us,es&amp;quot;&lt;/span&gt;]
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;F6&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; ToggleCycleSpellLang&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Consequently pressing &lt;code&gt;F6&lt;/code&gt; will enable spell check for the current buffer (&lt;code&gt;:set spell&lt;/code&gt;), and pressing &lt;code&gt;F6&lt;/code&gt; successively will be changing current language used for spell checking (&lt;code&gt;:set spelllang=es&lt;/code&gt;) until finally disable spell check again (&lt;code&gt;:set nospell&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I've uploaded the plugin to a &lt;a class="ampl" href="https://github.com/asierrayk/vim-toggle" target="_blank"&gt;github&lt;/a&gt; repository, and I've added similar funcionality related with quickfix and location windows.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Vim"></category></entry><entry><title>Objetos mutables en python</title><link href="https://asierrayk.github.io/python-mutable-objects" rel="alternate"></link><published>2020-02-01T16:31:00+01:00</published><updated>2020-02-01T16:31:00+01:00</updated><author><name></name></author><id>tag:asierrayk.github.io,2020-02-01:/python-mutable-objects</id><summary type="html">
&lt;p&gt;Supongamos que tenemos definida en python la siguiente función:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Si tuviésemos que decir cual es el resultado de hacer las siguientes llamadas sucesivas a la función, muchos pensareis que el resultado que se obtendría es:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;Supongamos que tenemos definida en python la siguiente función:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Si tuviésemos que decir cual es el resultado de hacer las siguientes llamadas sucesivas a la función, muchos pensareis que el resultado que se obtendría es:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# RESULTADO ERRONEO &lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sin embargo, el resultado que obtenemos es el siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# RESULTADO CORRECTO&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Esto es debido a que &lt;strong&gt;las listas en python son objetos mutables&lt;/strong&gt; y por tanto cuando son definidos como parámetros por defecto en una función, la lista se comporta como una variable global a todas las ejecuciones de la función. &lt;/p&gt;
&lt;p&gt;Cuando llamamos a &lt;code&gt;f(2)&lt;/code&gt; por primera vez se utiliza &lt;code&gt;[]&lt;/code&gt; que es el valor por defecto de la lista. Pero cuando se ejecuta &lt;code&gt;f(3)&lt;/code&gt; se utiliza la misma variable global que cuando se llamó a &lt;code&gt;f(2)&lt;/code&gt; cuyo ultimo valor es &lt;code&gt;[0, 1]&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="tabla-de-objetos-en-python"&gt;Tabla de objetos en python&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Objeto&lt;/th&gt;
&lt;th&gt;Mutable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list&lt;/td&gt;
&lt;td&gt;Sí&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tuple&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;str&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set&lt;/td&gt;
&lt;td&gt;Sí&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;frozenset&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dict&lt;/td&gt;
&lt;td&gt;Sí&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Los objetos mutables en python son pasados por referencia. A diferencia del resto que es como si fuesen pasados por valor (ya que son inmutables).
Un ejemplo de ello es el siguiente código:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Programación"></category><category term="programación"></category><category term="Python"></category></entry><entry><title>Mutable objects in python</title><link href="https://asierrayk.github.io/en/python-mutable-objects" rel="alternate"></link><published>2020-02-01T16:31:00+01:00</published><updated>2020-02-01T16:31:00+01:00</updated><author><name></name></author><id>tag:asierrayk.github.io,2020-02-01:/en/python-mutable-objects</id><summary type="html">
&lt;p&gt;Let's assume we have defined the following function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we have to guess what is the output of these calls to the function. A lot of
us will think is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3 …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;Let's assume we have defined the following function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we have to guess what is the output of these calls to the function. A lot of
us will think is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# WRONG RESULT&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, the correct result is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# CORRECT RESULT&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is due to the fact that &lt;strong&gt;lists in python are mutable objects&lt;/strong&gt;, and
therefore whenever they are defined as default parameters in a function, the
list behaves as a global variable common to all function's executions.&lt;/p&gt;
&lt;p&gt;When we call to &lt;code&gt;f(2)&lt;/code&gt; for the first time, the value &lt;code&gt;[]&lt;/code&gt; is being used by
default. But when &lt;code&gt;f(3)&lt;/code&gt; is executed the same global variable used when &lt;code&gt;f(2)&lt;/code&gt;
was called is used, which last value is &lt;code&gt;[0, 1]&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="table-of-objects-in-python"&gt;Table of objects in python&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Object&lt;/th&gt;
&lt;th&gt;Mutable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tuple&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;str&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;frozenset&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dict&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Mutable objects in python are passed by reference. Immutable objects is like
they were being passed by value.
An example of that is the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Programming"></category><category term="programming"></category><category term="Python"></category></entry><entry><title>Tutorial resolver cubo a ciegas</title><link href="https://asierrayk.github.io/tutorial-resolver-cubo-a-ciegas" rel="alternate"></link><published>2020-01-26T18:34:00+01:00</published><updated>2020-01-26T18:34:00+01:00</updated><author><name></name></author><id>tag:asierrayk.github.io,2020-01-26:/tutorial-resolver-cubo-a-ciegas</id><summary type="html">&lt;p&gt;Resolver por primera vez el cubo de Rubik es un momento emocionante. Sin embargo, esta sensación no es comparable a lo que se siente al resolver el cubo a ciegas por primera vez.&lt;/p&gt;
&lt;p&gt;En esta nueva entrada os dejo una serie de videos en los que os explico como poder …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Resolver por primera vez el cubo de Rubik es un momento emocionante. Sin embargo, esta sensación no es comparable a lo que se siente al resolver el cubo a ciegas por primera vez.&lt;/p&gt;
&lt;p&gt;En esta nueva entrada os dejo una serie de videos en los que os explico como poder resolver el cubo de Rubik a ciegas. Recordad que nada se consigue de la noche a la mañana, pero cuando se consigue, ese esfuerzo se ve recompensado.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/F6ZExWLDTVA?controls=0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/bTPB8e874RE?controls=0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/NwtBMPwUKQQ?controls=0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/MepNZqc_6d0?controls=0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/oCfC2UOy3A8?controls=0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/prTouypsDnM?controls=0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/HOlPkSpgRts?controls=0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/iAYGqSkNth8?controls=0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Aún recuerdo la primera vez que conseguí hacer mi primer cubo de Rubik a ciegas, allá por el 2013. Y solo puedo animaros a conseguirlo si ese es vuestro objetivo.&lt;/p&gt;</content><category term="Rubik"></category><category term="Rubik"></category><category term="tutorial"></category></entry><entry><title>Introducing RinohType</title><link href="https://asierrayk.github.io/my-super-post" rel="alternate"></link><published>2010-10-03T10:20:00+02:00</published><updated>2010-10-04T18:40:00+02:00</updated><author><name>Alexis Metaireau</name></author><id>tag:asierrayk.github.io,2010-10-03:/my-super-post</id><summary type="html">&lt;p class="first last"&gt;Short version for index and feeds&lt;/p&gt;
</summary><content type="html">
&lt;p&gt;I originally planned to release RinohType into wild only after I had finished a full review, refactoring and documenting of the code. I also wanted to write some API documentation and a small tutorial, all in the spirit of making a good first impression. Turns out all this takes a huge amount of time! So I've decided to dump the code in its current state onto GitHub, write a blog article about it and await some valuable feedback while I resume my refactoring and documenting chore.&lt;/p&gt;
&lt;p&gt;If you decide to play around with the code, please bear in mind that this is just a preview; your experience might not be as smooth as I intend it to be eventually.&lt;/p&gt;
&lt;div class="section" id="motivation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Motivation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Somewhere back in 2009, I was using &lt;a class="reference external" href="http://en.wikipedia.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt; to write a paper on some of my &lt;a class="reference external" href="distributed-amplification-in-cmos"&gt;PhD research&lt;/a&gt;. I had used LaTeX before for a number of lab reports and two master's theses, so I was already experienced with it. While I find working with LaTeX is generally a smooth experience, I did encounter some annoyances over the years. The particular annoyance of the day was figure placement. Where LaTeX's automatic figure placement is pretty good in longer texts, I find it extremely frustrating when writing a short paper. For these papers, I basically want to place my figures manually, exactly where I want them (figure 2 goes in the top of the left column on page 2, for example). However, this doesn't seem to be an option with LaTeX, so I ended up moving my &lt;tt class="docutils literal"&gt;\includegraphics&lt;/tt&gt; directive around in the LaTeX source document in a trial-and-error fashion to have the figure eventually appear where I wanted it to be. Basically, this meant moving all my &lt;tt class="docutils literal"&gt;\includegraphics&lt;/tt&gt; directives to a location far from near the text where it would end up in the rendered document. After a good hour of messing around with this and &lt;a class="reference external" href="http://www.ntg.nl/pipermail/ntg-context/2008/037150.html"&gt;exploring&lt;/a&gt;  two alternatives to LaTeX (&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Lout_(software)"&gt;Lout&lt;/a&gt; and &lt;a class="reference external" href="http://en.wikipedia.org/wiki/ConTeXt"&gt;ConTeXt&lt;/a&gt;), I said to myself, &lt;em&gt;Enough! I'm writing my own document processor!&lt;/em&gt; And so I set out to build the definitive replacement for LaTeX.&lt;/p&gt;
&lt;p&gt;It is worth pointing out the other gripes I have with (La)TeX at this point. I will probably regret this later (I have the impression TeXies can be quite fanatical), but here we go:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;TeX is not transparent. It is a huge, complex system. To make things worse, there are a number of different TeX distributions, each organizing things in a slightly different way. With hundreds of megabytes and seemingly millions of files for a typical TeX installation, I have no idea what is going on when TeX processes a document. &lt;a class="reference external" href="http://www.ctan.org/pkg/kpathsea"&gt;kpathsea&lt;/a&gt; is a testament to a part of this complexity.&lt;/li&gt;
&lt;li&gt;The arcane TeX macro language is not accessible to a broad audience. I believe this is why most LaTeX-generated documents you come across have exactly the same (retro) look; very few people are capable of creating new document styles.&lt;/li&gt;
&lt;li&gt;TeX is not very modern. Yes, even today it still is a very impressive piece of software. However, next to being built upon some weird macro language of old, it predates a lot of modern technologies (Unicode, standard font file formats, Postscript and PDF), so these things had to be hacked into it. While I understand you generally shouldn't rewrite software from scratch, maybe TeX should be one of the few exceptions to this rule?&lt;/li&gt;
&lt;li&gt;TeX's warnings/errors are often very cryptic. It can sometimes take a long time to figure out what's wrong.&lt;/li&gt;
&lt;li&gt;(La)TeX has an incredible amount of extension packages available. There's probably a package for pretty much &lt;a class="reference external" href="http://tex.stackexchange.com/questions/67656/are-there-other-fun-packages-like-the-coffee-stains-package"&gt;anything you might ever need&lt;/a&gt;. But why do I even need to mess around with all these extension packages when all I'm doing is writing a simple article? Doesn't this mean that LaTeX should include at least some of the most commonly used packages by default?&lt;/li&gt;
&lt;li&gt;This might largely be a solved problem by now, but I remember often running into input and font encoding issues with LaTeX in the past.&lt;/li&gt;
&lt;li&gt;There is no strict separation of content and style. This is mostly an issue for publishers that want to ensure a consistent style across articles in a journal. With LaTeX, academic authors can always reduce the margins or change the interline spacing to be able to squeeze in more half-truths.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wow, this all sounds very negative. I should mention that RinohType was in a large part also inspired by (La)TeX in a positive way; the latter gets a lot of things right indeed. However, I believe we can do better than TeX. Not so much in the typesetting quality, but in the ease-of-use.&lt;/p&gt;
&lt;p&gt;For me, the obvious programming language to choose for this little project was Python, as it is probably the most accessible programming language and generally fun to program in (ok, that's subjective). I imagined Python's powerful OO could be employed to define document styles that could easily be inherited from. Initially, I also planned on the source document being Python source files. While technically possible, I am now convinced that Python's syntax is not suited for this purpose.&lt;/p&gt;
&lt;p&gt;My goals in developing RinohType are mostly inspired by (La)TeX's shortcomings and common sense:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;RinohType should have a simple, transparent design and depend on as few external libraries as possible. This helps to keep installation and usage simple.&lt;/li&gt;
&lt;li&gt;It should be easy to define custom document layouts and visual styles.&lt;/li&gt;
&lt;li&gt;RinohType should accept Unicode input (only!).&lt;/li&gt;
&lt;li&gt;There should be built-in support for images and floats.&lt;/li&gt;
&lt;li&gt;It should be able to perform high-quality typesetting, supporting kerning, ligatures and hyphenation at the least.&lt;/li&gt;
&lt;li&gt;It should be able to typeset complex mathematical formulae.&lt;/li&gt;
&lt;li&gt;It should support modern font technologies (OpenType) and output to PDF.&lt;/li&gt;
&lt;li&gt;Naturally, it should support obvious features such as cross-references, page numbering, footnotes, table of contents and index generation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="current-status"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Current Status&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Because of the Unicode requirement, I opted to skip Python 2 and go with Python 3 which uses Unicode for all text strings. This avoids all problems associated with input encoding and simplifies text handling internally.&lt;/p&gt;
&lt;p&gt;At the time of writing, RinohType implements:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A simple, but powerful page layout engine, allowing for page headers/footers, columns and floats.&lt;/li&gt;
&lt;li&gt;Typesetting is already quite capable, supporting hyphenation, sub/superscripts, kerning, ligatures, text justification (left, right, justified) and alignment to tab stops.&lt;/li&gt;
&lt;li&gt;A hierarchical styles system, for both paragraphs and other objects such as figures and tables.&lt;/li&gt;
&lt;li&gt;Nestable inline text styling.&lt;/li&gt;
&lt;li&gt;Support for Type1, TrueType and OpenType (both the TrueType and CFF/Postscript/Type1 variants) fonts.&lt;/li&gt;
&lt;li&gt;A simple PDF backend. Other backends can be easily added.&lt;/li&gt;
&lt;li&gt;Numbered, unnumbered and definition lists.&lt;/li&gt;
&lt;li&gt;Figures (input as PDF files) and basic tables (with row/column spanning), with automatically numbered captions.&lt;/li&gt;
&lt;li&gt;Cross-references, automatic page numbering and footnotes.&lt;/li&gt;
&lt;li&gt;Automatically generated table of contents.&lt;/li&gt;
&lt;li&gt;With the help of &lt;a class="reference external" href="https://pypi.python.org/pypi/citeproc-py"&gt;citeproc-py&lt;/a&gt;, support for citing references from a BibTeX database and generating a bibliography.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The one major omission from this list is formula rendering. I did try using the TeX formula renderer from matplotlib (the &lt;tt class="docutils literal"&gt;mathtext&lt;/tt&gt; module) and &lt;a class="reference external" href="http://sourceforge.net/projects/svgmath/"&gt;SVGMath&lt;/a&gt;, but with unsatisfactory results. I've decided to write math rendering from scratch once the core of RinohType (everything listed above) is working properly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="example-documents-and-input-formats"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Example Documents and Input Formats&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt; Some PDF viewers (Firefox's pdf.js, Evince, ePDFViewer) seem to have a problem with the CFF OpenType fonts embedded in the sample PDF files below. I still need to determine if this is a bug in these viewers or in RinohType (see &lt;a class="reference external" href="https://github.com/brechtm/rinohtype/issues/2"&gt;issue 2&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;After abandoning the idea to use Python source files as the input format, I opted to go with XML, since it's a very common format and, more importantly, allows for validation using XML schemas. The &lt;a class="reference external" href="https://github.com/brechtm/rinohtype/tree/master/examples/rfic2009"&gt;RFIC example&lt;/a&gt; in the RinohType repository makes use of a custom XML input format, as defined in &lt;tt class="docutils literal"&gt;rfic.rnc&lt;/tt&gt; (&lt;a class="reference external" href="http://relaxng.org/compact-tutorial-20030326.html"&gt;RELAX NG Compact&lt;/a&gt;). This example shows off most of RinoType's capabilities. Download the &lt;a class="reference external" href="/files/intro_template.pdf"&gt;generated PDF&lt;/a&gt; to see the output.&lt;/p&gt;
&lt;p&gt;Guided by the RFIC example, it should be fairly straightforward (but still a lot of work) to write a DocBook frontend for RinohType. XML is also a great intermediate format, useful when to-XML converters for other input formats are available.&lt;/p&gt;
&lt;p&gt;XML is unfortunately not the best format for hand editing. One of the advantages of TeX source files is that they are easy to write and read (the content parts anyway). Luckily, Python's "native"
&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; is a great markup syntax that is easy to write and read. Additionally, it is extensible, which makes it pretty much the perfect input format for RinohType (I haven't thought about how to verify rST input yet, though). The &lt;a class="reference external" href="https://github.com/brechtm/rinohtype/tree/master/examples/restructuredtext"&gt;rST example&lt;/a&gt; attempts to typeset the &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/user/rst/quickstart.html"&gt;ReStructuredText Primer&lt;/a&gt;. Here is the &lt;a class="reference external" href="/files/intro_rst.pdf"&gt;output&lt;/a&gt;. The rST parser contained in &lt;tt class="docutils literal"&gt;rst.py&lt;/tt&gt; will eventually be moved into the core of RinohType as a frontend.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="evaluation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Evaluation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unsurprisingly, even after four years into its development, RinohType still does not provide an option for absolute figure placement, the missing LaTeX feature that started this journey. Of course, a lot of other things needed to be put in place before this could be addressed. While I could implement this feature at this point, there are more pressing things to address.&lt;/p&gt;
&lt;p&gt;I'm pretty happy with the result so far and I'm especially proud of the simplicity and compactness of the code. The &lt;tt class="docutils literal"&gt;rinoh&lt;/tt&gt; Python package counts less than 6500 lines of code (excluding comments/docstrings and empty lines). This includes both the PDF backend (1700 lines) and the font parsers (1750 lines), so the core of RinohType comprises only about 3000 lines of code! I think this is in a large part made possible due to the expressive power of Python. Though the fact that I was constantly refactoring must have also been an important factor.&lt;/p&gt;
&lt;p&gt;One aspect that I'm not so enthusiastic about is RinohType's performance. On my modest &lt;a class="reference external" href="http://ark.intel.com/products/40738/Intel-Celeron-Processor-T3000-1M-Cache-1_80-GHz-800-MHz-FSB"&gt;Celeron T3000 1.8 GHz&lt;/a&gt; laptop, the average rendering time for a page in the RFIC example is a disappointing 0.8 seconds. For small documents, this is unlikely to be a problem, but for books it's problematic. RinohType should become &lt;em&gt;at least&lt;/em&gt; a factor of ten faster. I've already introduced some optimizations such as &lt;a class="reference external" href="http://stackoverflow.com/questions/1988804/what-is-memoization-and-how-can-i-use-it-in-python"&gt;memoization&lt;/a&gt; and using generators instead of lists, but it is clearly not cutting it. Looking for an easy solution, I've done some quick tests with PyPy3k (rendering the RFIC example over and over in a loop), but these were rather disappointing; rendering speed was about five times &lt;em&gt;slower&lt;/em&gt; compared to CPython. With Cython, I'm not sure what part of the code to enhance with type declarations, as there is no obvious number crunching going on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="planned-work"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Planned Work&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I first want to finish refactoring and documenting the remaining parts of the code. When this is done, performance tweaking will probably be near the top of my to-do list. Once the current functionality is more or less stable, I'd like to tackle maths typesetting. I'm secretly hoping Microsoft's mathematical OpenType layout extensions can help me get good results for at least a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Category:Mathematical_OpenType_typefaces"&gt;small number of fonts&lt;/a&gt; with minimal effort.&lt;/p&gt;
&lt;p&gt;Some other features that I have been thinking of, in order of likeliness to actually make it into RinohType in the foreseeable future:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Manual figure placement!&lt;/li&gt;
&lt;li&gt;Provide a number of standard document/page/font styles&lt;/li&gt;
&lt;li&gt;Fake small capitals for fonts that do not provide any&lt;/li&gt;
&lt;li&gt;Enhance the PDF backend with support for colors, hyperlinks, bookmarks, etc.&lt;/li&gt;
&lt;li&gt;Provide a RinohType output backend for &lt;a class="reference external" href="http://sphinx-doc.org"&gt;Sphinx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Include font definitions for freely available fonts (automatically downloaded when referenced)&lt;/li&gt;
&lt;li&gt;Advanced typesetting features such as Knuth-Plass line breaking and &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Microtypography"&gt;microtypography&lt;/a&gt; as in PDFTeX (once performance is up to standards)&lt;/li&gt;
&lt;li&gt;DocBook frontend&lt;/li&gt;
&lt;li&gt;Support for non-Western languages; support RTL text and related OpenType extensions&lt;/li&gt;
&lt;li&gt;Non-rectangular paragraphs&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="for-the-brave-dependencies"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;For the Brave / Dependencies&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can try out RinohType by cloning &lt;a class="reference external" href="https://github.com/brechtm/rinohtype"&gt;the repository&lt;/a&gt;, adding the top-level directory to your &lt;tt class="docutils literal"&gt;PYTHON_PATH&lt;/tt&gt; and running the examples.&lt;/p&gt;
&lt;p&gt;For the RFIC example, you will need &lt;a class="reference external" href="https://pypi.python.org/pypi/citeproc-py"&gt;citeproc-py&lt;/a&gt;. If you want to validate the XML input, you will also need &lt;a class="reference external" href="http://lxml.de"&gt;lxml&lt;/a&gt;. For the reStructuredText example, you need &lt;a class="reference external" href="https://pypi.python.org/pypi/docutils"&gt;docutils&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While it should be obvious how to adjust the text styles in the examples, it is not equally obvious how page layout is defined in the RFIC example. Also, an introduction on how the parsed input data (XML or rST) is processed might be useful if you want to define another XML input schema or extend the reStructuredText frontend. For this reason, I plan on following up on this article with a short tutorial covering these topics before I start writing official documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-license"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;The License&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While this originally started out as just another one of my programming projects, I am investigating the possibility to sell licenses for commercial use, as this could ensure that RinohType is actively developed in the future. I have therefor released RinohType under the Affero GPL.&lt;/p&gt;
&lt;p&gt;The Affero GPL ensures that RinohType is free for use in open source projects. I am aware that the viral nature of the GPL makes it impossible for non-GPL projects to depend on RinohType, though. Unfortunately, it is this same viral nature that makes it possible to sell commercial-use licenses (a non-intentional side-effect of the copyleft?). Perhaps it is possible to employ a BSD-like license customized to prohibit commercial use? I have not yet found any examples of such a setup, but I will look into this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="discussion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Discussion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;See comments on &lt;a class="reference external" href="https://news.ycombinator.com/item?id=6668551"&gt;Hacker News&lt;/a&gt; and &lt;a class="reference external" href="http://www.reddit.com/r/Python/comments/1pw20k/introducing_rinohtype_the_python_document/"&gt;Reddit&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="yeah"></category><category term="python"></category></entry></feed>